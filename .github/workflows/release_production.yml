name: Release to Production (Manual)

on:
  workflow_dispatch:
    inputs:
      release_branch:
        description: 'Nombre de la rama release (ej: release/1.2.3)'
        required: true
      tag_name:
        description: 'Tag a crear (dejar vacío para usar el último tag)'
        required: false
        default: ''

jobs:
  tag_release_branch:
    name: Taggear rama release
    runs-on: ubuntu-latest
    environment: production
    permissions: write-all
    outputs:
      tag_name: ${{ steps.set_tag.outputs.tag_name }}
    steps:
      - name: Checkout de rama release
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.release_branch }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Validar si el tag manual ya existe
        if: ${{ github.event.inputs.tag_name != '' }}
        id: check_manual_tag
        run: |
          if git rev-parse ${{ github.event.inputs.tag_name }} >/dev/null 2>&1; then
            echo "El tag ${{ github.event.inputs.tag_name }} ya existe. Abortando workflow."
            exit 1
          fi
      - name: Obtener siguiente tag automáticamente si no hay tag manual
        if: ${{ github.event.inputs.tag_name == '' }}
        id: previoustag
        uses: WyriHaximus/github-action-get-previous-tag@v1
        with:
          fallback: 0.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Calcular siguiente tag semver (patch)
        if: ${{ github.event.inputs.tag_name == '' }}
        id: semvers
        uses: WyriHaximus/github-action-next-semvers@v1
        with:
          version: ${{ steps.previoustag.outputs.tag }}
      - name: Set tag variable
        id: set_tag
        run: |
          if [ "${{ github.event.inputs.tag_name }}" != "" ]; then
            TAG="${{ github.event.inputs.tag_name }}"
          else
            TAG="${{ steps.semvers.outputs.v_patch }}"
          fi
          echo "tag_name=$TAG" >> $GITHUB_OUTPUT
          echo "TAG=$TAG" >> $GITHUB_ENV
      - name: Crear tag si no existe (solo si no falló antes)
        run: |
          if git rev-parse $TAG >/dev/null 2>&1; then
            echo "El tag $TAG ya existe. Abortando workflow."
            exit 1
          else
            git config --global user.email "admin@github.com"
            git config --global user.name "Admin"
            git tag -a $TAG HEAD -m "Release $TAG"
            git push origin $TAG
          fi

  merge_release_to_main:
    name: Mergear release a main
    runs-on: ubuntu-latest
    environment: production
    permissions: write-all
    needs: tag_release_branch
    steps:
      - name: Checkout de main y release
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Configurar usuario git
        run: |
          git config --global user.email "admin@github.com"
          git config --global user.name "Admin"
      - name: Traer rama release
        run: |
          git fetch origin ${{ github.event.inputs.release_branch }}:${{ github.event.inputs.release_branch }}
      - name: Mergear release a main
        run: |
          git checkout main
          git merge --no-ff ${{ github.event.inputs.release_branch }} -m "Merge ${{ github.event.inputs.release_branch }} into main"
          git push origin main

  merge_release_to_develop:
    name: Mergear release a develop
    runs-on: ubuntu-latest
    environment: production
    permissions: write-all
    needs: tag_release_branch
    steps:
      - name: Checkout de develop y release
        uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Configurar usuario git
        run: |
          git config --global user.email "admin@github.com"
          git config --global user.name "Admin"
      - name: Traer rama release
        run: |
          git fetch origin ${{ github.event.inputs.release_branch }}:${{ github.event.inputs.release_branch }}
      - name: Mergear release a develop
        run: |
          git checkout develop
          git merge --no-ff ${{ github.event.inputs.release_branch }} -m "Merge ${{ github.event.inputs.release_branch }} into develop"
          git push origin develop

  deploy_vercel:
    name: Desplegar a producción (Vercel)
    needs: [merge_release_to_main, merge_release_to_develop]
    uses: ./.github/workflows/vercel-reusable-deploy.yml
    with:
      github_environment: production
      vercel_environment: production
      prod: true
    secrets:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
