# .github/workflows/release.yml
name: ▫️ Reusable Release Steps - Create new version
on:
  workflow_call:
    inputs:
      release_version:
        required: true
        type: string
      node_version:
        required: false
        type: string
        default: '22'
    secrets:
      NEXT_PUBLIC_KONTENT_ENVIRONMENT_ID:
        required: true
      NEXT_PUBLIC_KONTENT_COLLECTION_CODENAME:
        required: true
      CONSCIA_API_URL:
        required: true
      CONSCIA_BEARER_TOKEN:
        required: true
      CONSCIA_CUSTOMER:
        required: true
      CONSCIA_ENVIRONMENT_CODE:
        required: true
      LHCI_GITHUB_APP_TOKEN:
        required: true
      VERCEL_TOKEN:
        required: true
      VERCEL_ORG_ID:
        required: true
      VERCEL_PROJECT_ID:
        required: true

jobs:
  create_branch_release:
    name: Creating release branch
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: Repository checkout
        uses: actions/checkout@v4 
        with:
          ref: develop
      - name: Create and push release branch
        run: |
          git fetch origin
          git checkout develop
          git pull
          git checkout -b ${{inputs.release_version}}
          git push -f -u origin ${{inputs.release_version}}
      - name: Merge develop -> release
        uses: tukasz/direct-merge-action@master
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          source-branch: develop
          target-branch: ${{inputs.release_version}}
          commit-message: "Branch ${{inputs.release_version}} was updated with develop branch changes"

  run_ci_on_release_branch:
    needs: create_branch_release
    name: Run CI on release branch
    uses: ./.github/workflows/reusable-ci.yml # Calls our reusable CI workflow
    with:
      branch_name: ${{ inputs.release_version }}
      github_environment: staging 
      node_version: ${{ inputs.node_version }}
    secrets:
      # Passing the required secrets to the reusable CI workflow
      NEXT_PUBLIC_KONTENT_ENVIRONMENT_ID: ${{ secrets.NEXT_PUBLIC_KONTENT_ENVIRONMENT_ID }}
      NEXT_PUBLIC_KONTENT_COLLECTION_CODENAME: ${{ secrets.NEXT_PUBLIC_KONTENT_COLLECTION_CODENAME }}
      CONSCIA_API_URL: ${{ secrets.CONSCIA_API_URL }}
      CONSCIA_BEARER_TOKEN: ${{ secrets.CONSCIA_BEARER_TOKEN }}
      CONSCIA_CUSTOMER: ${{ secrets.CONSCIA_CUSTOMER }}
      CONSCIA_ENVIRONMENT_CODE: ${{ secrets.CONSCIA_ENVIRONMENT_CODE }}
      LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Merge release branch into staging after deployment to Vercel
  merge_branch_release_to_staging:
    # This job merges the release branch into the staging branch after deployment to Vercel
    needs: run_ci_on_release_branch
    name: Merge release branch into staging
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: Mezcla release -> staging
        uses: tukasz/direct-merge-action@master
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          source-branch: ${{inputs.release_version}}
          target-branch: staging
          commit-message: "Merge release branch ${{inputs.release_version}} into staging. Staging branch updated"

  # Deploy a Vercel Staging
  deploy_release_to_vercel_staging:
    needs: run_ci_on_release_branch # Needs to ensure the CI has passed
    if: github.event_name == 'workflow_call' # This job only runs when called from another workflow
    name: Deploy release to Vercel Staging
    uses: ./.github/workflows/reusable-vercel-deploy.yml # Calls our reusable Vercel deploy workflow
    with:
      github_environment: staging 
      vercel_environment: preview
      branch_name: staging
      prod: false
    secrets:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

  # PR automático de release a staging
  create-pr-release-to-staging:
    name: Create PR from release to Staging
    runs-on: ubuntu-latest
    needs: run_ci_on_release_branch
    steps:
      - name: Create Pull Request to Staging
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const { data: pr } = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: "Release ${{ inputs.release_version }} → Staging",
                head: "${{ inputs.release_version }}",
                base: "staging",
                body: `Este PR fue generado automáticamente para solicitar el merge de la rama de release \`${{ inputs.release_version }}\` hacia \`staging\`. Por favor, revisa y aprueba según la política de revisores.`
              });
              core.info(`PR creado: ${pr.html_url}`);
            } catch (e) {
              if (e.status === 422) {
                core.info('Ya existe un PR abierto para esta rama.');
              } else {
                throw e;
              }
            }

  # PR automático de release a main
  create-pr-release-to-main:
    name: Create PR from release to Main
    runs-on: ubuntu-latest
    needs: run_ci_on_release_branch
    steps:
      - name: Create Pull Request to Main
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const { data: pr } = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: "Release ${{ inputs.release_version }} → Main",
                head: "${{ inputs.release_version }}",
                base: "main",
                body: `Este PR fue generado automáticamente para solicitar el merge de la rama de release \`${{ inputs.release_version }}\` hacia \`main\`. Por favor, revisa y aprueba según la política de revisores.`
              });
              core.info(`PR creado: ${pr.html_url}`);
            } catch (e) {
              if (e.status === 422) {
                core.info('Ya existe un PR abierto para esta rama.');
              } else {
                throw e;
              }
            }

  # PR automático de release a develop
  create-pr-release-to-develop:
    name: Create PR from release to Develop
    runs-on: ubuntu-latest
    needs: run_ci_on_release_branch
    steps:
      - name: Create Pull Request to Develop
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const { data: pr } = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: "Release ${{ inputs.release_version }} → Develop",
                head: "${{ inputs.release_version }}",
                base: "develop",
                body: `Este PR fue generado automáticamente para solicitar el merge de la rama de release \`${{ inputs.release_version }}\` hacia \`develop\`. Por favor, revisa y aprueba según la política de revisores.`
              });
              core.info(`PR creado: ${pr.html_url}`);
            } catch (e) {
              if (e.status === 422) {
                core.info('Ya existe un PR abierto para esta rama.');
              } else {
                throw e;
              }
            }