# .github/workflows/release_patch.yml
name: 02 - Release - Patch
run-name: ${{ github.actor }} is creating a PATCH - Release branch ðŸš€

on:
  workflow_dispatch:
    inputs:
      node_version:
        description: 'Node.js version to use'
        required: false
        default: '22'
        type: choice
        options:
          - '22'
          - '20'

jobs:
  generate-version:
    name: Create PATCH version
    runs-on: ubuntu-latest # It's possible to use matrix here if we needed
    outputs:
      release_version: ${{ steps.setting_version.outputs.RELEASE_VERSION }}

    steps:
      - name: Update repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Necessary to get all tags

      - name: Get previous tag from repository
        # This step retrieves the last tag from the repository to determine the next version
        id: previoustag
        uses: 'WyriHaximus/github-action-get-previous-tag@v1'
        with:
          fallback: 0.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Make sure this secret is available

      - name: Get new version based on previous tag
        id: semvers
        uses: "WyriHaximus/github-action-next-semvers@v1"
        with:
          version: ${{ steps.previoustag.outputs.tag }}

      - name: Setting PATCH version
        run: |
          echo "RELEASE_VERSION=${{ steps.semvers.outputs.patch }}" >> $GITHUB_ENV

      - name: Setting GLOBAL version
        id: setting_version
        run: |
          echo "RELEASE_VERSION=${{ env.RELEASE_VERSION }}" >> $GITHUB_OUTPUT

  invoke_workflow:
    needs: [ generate-version ]
    permissions: write-all # This step needs write permissions to create branches and tags
    uses: ./.github/workflows/release.yml # Path to the reusable release workflow
    with:
      release_version: release/${{ needs.generate-version.outputs.release_version }}
      node_version: ${{ github.event.inputs.node_version }}
